
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION}
    # application: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_SR_VERSION}
    init: confluentinc/confluent-init-container:${CFK_INIT_CONTAINER_VERSION}
  tls:
    secretRef: tls-schemaregistry
  authorization:
    type: rbac
  configOverrides:
    jvm:
      - "-Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=*"
    server:
      - "resource.extension.class=io.confluent.kafka.schemaregistry.rulehandler.RuleSetResourceExtension,io.confluent.dekregistry.DekRegistryResourceExtension"
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.${NAMESPACE}.svc.cluster.local:9071
      authentication:
        type: oauth
        jaasConfig:
          secretRef: schemaregistry-oauth-jaas
        oauthSettings:
          subClaimName: client_id
          tokenEndpointUri: http://keycloak.${KEYCLOAK_NAMESPACE}.svc.cluster.local:8080/realms/confluent/protocol/openid-connect/token
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.${NAMESPACE}.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: schemaregistry-oauth-jaas
          configuration:
            tokenEndpointUri: http://keycloak.${KEYCLOAK_NAMESPACE}.svc.cluster.local:8080/realms/confluent/protocol/openid-connect/token
            expectedIssuer: https://keycloak.${BASE_DOMAIN}/realms/confluent
            # expectedIssuer: http://keycloak.${KEYCLOAK_NAMESPACE}.svc.cluster.local:8080/realms/confluent
            jwksEndpointUri: http://keycloak.${KEYCLOAK_NAMESPACE}.svc.cluster.local:8080/realms/confluent/protocol/openid-connect/certs
            subClaimName: client_id
      tls:
        enabled: true